commit 80eab6820248be53a3ed5e156bc68ebc0000f9b8
Author: Andreas Sturmlechner <andreas.sturmlechner@gmail.com>
Date:   Tue May 2 23:21:45 2017 +0200

    qgpgme: Fix build with GCC 6.3.0
    
    Thanks-to: Arfrever Frehtes Taifersar Arahesis <Arfrever@Apache.Org>

diff --git a/libkleo/backends/qgpgme/qgpgmeadduseridjob.cpp b/libkleo/backends/qgpgme/qgpgmeadduseridjob.cpp
index de13b25bb8..a7f5ac35a1 100644
--- a/libkleo/backends/qgpgme/qgpgmeadduseridjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmeadduseridjob.cpp
@@ -70,7 +70,7 @@ static QGpgMEAddUserIDJob::result_type add_user_id( Context * ctx, const Key & k
   const Error err = ctx->edit( key, ei, data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( err, log, ae );
+  return boost::make_tuple( err, log, ae );
 }
 
 Error QGpgMEAddUserIDJob::start( const Key & key, const QString & name, const QString & email, const QString & comment ) {
diff --git a/libkleo/backends/qgpgme/qgpgmechangeexpiryjob.cpp b/libkleo/backends/qgpgme/qgpgmechangeexpiryjob.cpp
index 437821cfbd..7f0155e6e6 100644
--- a/libkleo/backends/qgpgme/qgpgmechangeexpiryjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmechangeexpiryjob.cpp
@@ -68,7 +68,7 @@ static QGpgMEChangeExpiryJob::result_type change_expiry( Context * ctx, const Ke
   const Error err = ctx->edit( key, ei, data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( err, log, ae );
+  return boost::make_tuple( err, log, ae );
 }
 
 Error QGpgMEChangeExpiryJob::start( const Key & key, const QDateTime & expiry ) {
diff --git a/libkleo/backends/qgpgme/qgpgmechangeownertrustjob.cpp b/libkleo/backends/qgpgme/qgpgmechangeownertrustjob.cpp
index 8e1ef6a5e5..be03d2c70a 100644
--- a/libkleo/backends/qgpgme/qgpgmechangeownertrustjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmechangeownertrustjob.cpp
@@ -65,7 +65,7 @@ static QGpgMEChangeOwnerTrustJob::result_type change_ownertrust( Context * ctx,
   const Error err = ctx->edit( key, ei, data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( err, log, ae );
+  return boost::make_tuple( err, log, ae );
 }
 
 Error QGpgMEChangeOwnerTrustJob::start( const Key & key, Key::OwnerTrust trust ) {
diff --git a/libkleo/backends/qgpgme/qgpgmedecryptjob.cpp b/libkleo/backends/qgpgme/qgpgmedecryptjob.cpp
index 08a88da4d8..76da7d4ef6 100644
--- a/libkleo/backends/qgpgme/qgpgmedecryptjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmedecryptjob.cpp
@@ -74,7 +74,7 @@ static QGpgMEDecryptJob::result_type decrypt( Context * ctx, QThread * thread, c
     const DecryptionResult res = ctx->decrypt( indata, outdata );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res, out.data(), log, ae );
+    return boost::make_tuple( res, out.data(), log, ae );
   } else {
     QGpgME::QIODeviceDataProvider out( plainText );
     Data outdata( &out );
@@ -82,7 +82,7 @@ static QGpgMEDecryptJob::result_type decrypt( Context * ctx, QThread * thread, c
     const DecryptionResult res = ctx->decrypt( indata, outdata );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res, QByteArray(), log, ae );
+    return boost::make_tuple( res, QByteArray(), log, ae );
   }
 
 }
diff --git a/libkleo/backends/qgpgme/qgpgmedecryptverifyjob.cpp b/libkleo/backends/qgpgme/qgpgmedecryptverifyjob.cpp
index c30337895b..3c45180df9 100644
--- a/libkleo/backends/qgpgme/qgpgmedecryptverifyjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmedecryptverifyjob.cpp
@@ -80,7 +80,7 @@ static QGpgMEDecryptVerifyJob::result_type decrypt_verify( Context * ctx, QThrea
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
     kDebug(5150) << "end";
-    return make_tuple( res.first, res.second, out.data(), log, ae );
+    return boost::make_tuple( res.first, res.second, out.data(), log, ae );
   } else {
     QGpgME::QIODeviceDataProvider out( plainText );
     Data outdata( &out );
@@ -89,7 +89,7 @@ static QGpgMEDecryptVerifyJob::result_type decrypt_verify( Context * ctx, QThrea
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
     kDebug(5150) << "end";
-    return make_tuple( res.first, res.second, QByteArray(), log, ae );
+    return boost::make_tuple( res.first, res.second, QByteArray(), log, ae );
   }
 
 }
diff --git a/libkleo/backends/qgpgme/qgpgmedeletejob.cpp b/libkleo/backends/qgpgme/qgpgmedeletejob.cpp
index 405bd5864c..13205ec2bc 100644
--- a/libkleo/backends/qgpgme/qgpgmedeletejob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmedeletejob.cpp
@@ -53,7 +53,7 @@ static QGpgMEDeleteJob::result_type delete_key( Context * ctx, const Key & key,
   const Error err = ctx->deleteKey( key, allowSecretKeyDeletion );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( err, log, ae );
+  return boost::make_tuple( err, log, ae );
 }
 
 Error QGpgMEDeleteJob::start( const Key & key, bool allowSecretKeyDeletion ) {
diff --git a/libkleo/backends/qgpgme/qgpgmedownloadjob.cpp b/libkleo/backends/qgpgme/qgpgmedownloadjob.cpp
index b753856056..9adb154034 100644
--- a/libkleo/backends/qgpgme/qgpgmedownloadjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmedownloadjob.cpp
@@ -64,7 +64,7 @@ static QGpgMEDownloadJob::result_type download_qsl( Context * ctx, const QString
   const Error err= ctx->exportPublicKeys( pc.patterns(), data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( err, dp.data(), log, ae );
+  return boost::make_tuple( err, dp.data(), log, ae );
 }
 
 static QGpgMEDownloadJob::result_type download( Context * ctx, QThread * thread, const QByteArray & fpr, const weak_ptr<QIODevice> & keyData_ ) {
@@ -82,7 +82,7 @@ static QGpgMEDownloadJob::result_type download( Context * ctx, QThread * thread,
   const Error err = ctx->exportPublicKeys( pc.patterns(), data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( err, QByteArray(), log, ae );
+  return boost::make_tuple( err, QByteArray(), log, ae );
 }
 
 Error QGpgMEDownloadJob::start( const QStringList & pats ) {
diff --git a/libkleo/backends/qgpgme/qgpgmeencryptjob.cpp b/libkleo/backends/qgpgme/qgpgmeencryptjob.cpp
index c1f58243ad..91326962fc 100644
--- a/libkleo/backends/qgpgme/qgpgmeencryptjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmeencryptjob.cpp
@@ -92,7 +92,7 @@ static QGpgMEEncryptJob::result_type encrypt( Context * ctx, QThread * thread,
     const EncryptionResult res = ctx->encrypt( recipients, indata, outdata, eflags );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res, out.data(), log, ae );
+    return boost::make_tuple( res, out.data(), log, ae );
   } else {
     QGpgME::QIODeviceDataProvider out( cipherText );
     Data outdata( &out );
@@ -103,7 +103,7 @@ static QGpgMEEncryptJob::result_type encrypt( Context * ctx, QThread * thread,
     const EncryptionResult res = ctx->encrypt( recipients, indata, outdata, eflags );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res, QByteArray(), log, ae );
+    return boost::make_tuple( res, QByteArray(), log, ae );
   }
 
 }
diff --git a/libkleo/backends/qgpgme/qgpgmeexportjob.cpp b/libkleo/backends/qgpgme/qgpgmeexportjob.cpp
index df155ecd18..96923e4fd4 100644
--- a/libkleo/backends/qgpgme/qgpgmeexportjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmeexportjob.cpp
@@ -64,7 +64,7 @@ static QGpgMEExportJob::result_type export_qba( Context * ctx, const QStringList
   const Error err = ctx->exportPublicKeys( pc.patterns(), data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( err, dp.data(), log, ae );
+  return boost::make_tuple( err, dp.data(), log, ae );
 }
 
 Error QGpgMEExportJob::start( const QStringList & patterns ) {
diff --git a/libkleo/backends/qgpgme/qgpgmeimportfromkeyserverjob.cpp b/libkleo/backends/qgpgme/qgpgmeimportfromkeyserverjob.cpp
index a99398ade9..ed8cd05c2d 100644
--- a/libkleo/backends/qgpgme/qgpgmeimportfromkeyserverjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmeimportfromkeyserverjob.cpp
@@ -56,7 +56,7 @@ static QGpgMEImportFromKeyserverJob::result_type importfromkeyserver( Context *
   const ImportResult res = ctx->importKeys( keys );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( res, log, ae );
+  return boost::make_tuple( res, log, ae );
 }
 
 Error QGpgMEImportFromKeyserverJob::start( const std::vector<Key> & keys ) {
diff --git a/libkleo/backends/qgpgme/qgpgmeimportjob.cpp b/libkleo/backends/qgpgme/qgpgmeimportjob.cpp
index 80c9bfa7e5..9dc170c91e 100644
--- a/libkleo/backends/qgpgme/qgpgmeimportjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmeimportjob.cpp
@@ -59,7 +59,7 @@ static QGpgMEImportJob::result_type import_qba( Context * ctx, const QByteArray
   const ImportResult res = ctx->importKeys( data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( res, log, ae );
+  return boost::make_tuple( res, log, ae );
 }
 
 Error QGpgMEImportJob::start( const QByteArray & certData ) {
diff --git a/libkleo/backends/qgpgme/qgpgmekeygenerationjob.cpp b/libkleo/backends/qgpgme/qgpgmekeygenerationjob.cpp
index fc076b1f47..7a0b745ce0 100644
--- a/libkleo/backends/qgpgme/qgpgmekeygenerationjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmekeygenerationjob.cpp
@@ -59,7 +59,7 @@ static QGpgMEKeyGenerationJob::result_type generate_key( Context * ctx, const QS
   const KeyGenerationResult res = ctx->generateKey( parameters.toUtf8().constData(), data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( res, dp.data(), log, ae );
+  return boost::make_tuple( res, dp.data(), log, ae );
 }
 
 Error QGpgMEKeyGenerationJob::start( const QString & parameters ) {
diff --git a/libkleo/backends/qgpgme/qgpgmekeylistjob.cpp b/libkleo/backends/qgpgme/qgpgmekeylistjob.cpp
index 4d26eb8772..c9c4642c62 100644
--- a/libkleo/backends/qgpgme/qgpgmekeylistjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmekeylistjob.cpp
@@ -85,7 +85,7 @@ static QGpgMEKeyListJob::result_type list_keys( Context * ctx, QStringList pats,
   if ( pats.size() < 2 ) {
     std::vector<Key> keys;
     const KeyListResult r = do_list_keys( ctx, pats, keys, secretOnly );
-    return make_tuple( r, keys, QString(), Error() );
+    return boost::make_tuple( r, keys, QString(), Error() );
   }
 
   // The communication channel between gpgme and gpgsm is limited in
@@ -109,7 +109,7 @@ retry:
       chunkSize /= 2;
       if ( chunkSize < 1 )
         // chunks smaller than one can't be -> return the error.
-        return make_tuple( this_result, keys, QString(), Error() );
+        return boost::make_tuple( this_result, keys, QString(), Error() );
       else
         goto retry;
     }
@@ -119,7 +119,7 @@ retry:
       break;
     pats = pats.mid( chunkSize );
   } while ( !pats.empty() );
-  return make_tuple( result, keys, QString(), Error() );
+  return boost::make_tuple( result, keys, QString(), Error() );
 }
 
 Error QGpgMEKeyListJob::start( const QStringList & patterns, bool secretOnly ) {
diff --git a/libkleo/backends/qgpgme/qgpgmesignencryptjob.cpp b/libkleo/backends/qgpgme/qgpgmesignencryptjob.cpp
index ef92e72362..4a8ebe7612 100644
--- a/libkleo/backends/qgpgme/qgpgmesignencryptjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmesignencryptjob.cpp
@@ -83,7 +83,7 @@ static QGpgMESignEncryptJob::result_type sign_encrypt( Context * ctx, QThread *
   Q_FOREACH( const Key & signer, signers )
     if ( !signer.isNull() )
       if ( const Error err = ctx->addSigningKey( signer ) )
-        return make_tuple( SigningResult( err ), EncryptionResult(), QByteArray(), QString(), Error() );
+        return boost::make_tuple( SigningResult( err ), EncryptionResult(), QByteArray(), QString(), Error() );
 
   if ( !cipherText ) {
     QGpgME::QByteArrayDataProvider out;
@@ -95,7 +95,7 @@ static QGpgMESignEncryptJob::result_type sign_encrypt( Context * ctx, QThread *
     const std::pair<SigningResult, EncryptionResult> res = ctx->signAndEncrypt( recipients, indata, outdata, eflags );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res.first, res.second, out.data(), log, ae );
+    return boost::make_tuple( res.first, res.second, out.data(), log, ae );
   } else {
     QGpgME::QIODeviceDataProvider out( cipherText );
     Data outdata( &out );
@@ -106,7 +106,7 @@ static QGpgMESignEncryptJob::result_type sign_encrypt( Context * ctx, QThread *
     const std::pair<SigningResult, EncryptionResult> res = ctx->signAndEncrypt( recipients, indata, outdata, eflags );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res.first, res.second, QByteArray(), log, ae );
+    return boost::make_tuple( res.first, res.second, QByteArray(), log, ae );
   }
 
 }
diff --git a/libkleo/backends/qgpgme/qgpgmesignjob.cpp b/libkleo/backends/qgpgme/qgpgmesignjob.cpp
index 426972c72b..00ea2fd0e1 100644
--- a/libkleo/backends/qgpgme/qgpgmesignjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmesignjob.cpp
@@ -83,7 +83,7 @@ static QGpgMESignJob::result_type sign( Context * ctx, QThread * thread,
   Q_FOREACH( const Key & signer, signers )
     if ( !signer.isNull() )
       if ( const Error err = ctx->addSigningKey( signer ) )
-        return make_tuple( SigningResult( err ), QByteArray(), QString(), Error() );
+        return boost::make_tuple( SigningResult( err ), QByteArray(), QString(), Error() );
 
   if ( !signature ) {
     QGpgME::QByteArrayDataProvider out;
@@ -95,7 +95,7 @@ static QGpgMESignJob::result_type sign( Context * ctx, QThread * thread,
     const SigningResult res = ctx->sign( indata, outdata, mode );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res, out.data(), log, ae );
+    return boost::make_tuple( res, out.data(), log, ae );
   } else {
     QGpgME::QIODeviceDataProvider out( signature );
     Data outdata( &out );
@@ -106,7 +106,7 @@ static QGpgMESignJob::result_type sign( Context * ctx, QThread * thread,
     const SigningResult res = ctx->sign( indata, outdata, mode );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res, QByteArray(), log, ae );
+    return boost::make_tuple( res, QByteArray(), log, ae );
   }
 
 }
diff --git a/libkleo/backends/qgpgme/qgpgmesignkeyjob.cpp b/libkleo/backends/qgpgme/qgpgmesignkeyjob.cpp
index 9c67a70644..42a83afa39 100644
--- a/libkleo/backends/qgpgme/qgpgmesignkeyjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmesignkeyjob.cpp
@@ -73,11 +73,11 @@ static QGpgMESignKeyJob::result_type sign_key( Context * ctx, const Key & key, c
 
   if ( !signer.isNull() )
       if ( const Error err = ctx->addSigningKey( signer ) )
-          return make_tuple( err, QString(), Error() );
+          return boost::make_tuple( err, QString(), Error() );
   const Error err = ctx->edit( key, ei, data );
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
-  return make_tuple( err, log, ae );
+  return boost::make_tuple( err, log, ae );
 }
 
 Error QGpgMESignKeyJob::start( const Key & key ) {
diff --git a/libkleo/backends/qgpgme/qgpgmeverifydetachedjob.cpp b/libkleo/backends/qgpgme/qgpgmeverifydetachedjob.cpp
index 662e1ab987..b258d842bf 100644
--- a/libkleo/backends/qgpgme/qgpgmeverifydetachedjob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmeverifydetachedjob.cpp
@@ -73,7 +73,7 @@ static QGpgMEVerifyDetachedJob::result_type verify_detached( Context * ctx, QThr
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
 
-  return make_tuple( res, log, ae );
+  return boost::make_tuple( res, log, ae );
 }
 
 static QGpgMEVerifyDetachedJob::result_type verify_detached_qba( Context * ctx, const QByteArray & signature, const QByteArray & signedData ) {
@@ -87,7 +87,7 @@ static QGpgMEVerifyDetachedJob::result_type verify_detached_qba( Context * ctx,
   Error ae;
   const QString log = _detail::audit_log_as_html( ctx, ae );
 
-  return make_tuple( res, log, ae );
+  return boost::make_tuple( res, log, ae );
 
 }
 
diff --git a/libkleo/backends/qgpgme/qgpgmeverifyopaquejob.cpp b/libkleo/backends/qgpgme/qgpgmeverifyopaquejob.cpp
index dad99dab6f..4e7b43b863 100644
--- a/libkleo/backends/qgpgme/qgpgmeverifyopaquejob.cpp
+++ b/libkleo/backends/qgpgme/qgpgmeverifyopaquejob.cpp
@@ -74,7 +74,7 @@ static QGpgMEVerifyOpaqueJob::result_type verify_opaque( Context * ctx, QThread
     const VerificationResult res = ctx->verifyOpaqueSignature( indata, outdata );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res, out.data(), log, ae );
+    return boost::make_tuple( res, out.data(), log, ae );
   } else {
     QGpgME::QIODeviceDataProvider out( plainText );
     Data outdata( &out );
@@ -82,7 +82,7 @@ static QGpgMEVerifyOpaqueJob::result_type verify_opaque( Context * ctx, QThread
     const VerificationResult res = ctx->verifyOpaqueSignature( indata, outdata );
     Error ae;
     const QString log = _detail::audit_log_as_html( ctx, ae );
-    return make_tuple( res, QByteArray(), log, ae );
+    return boost::make_tuple( res, QByteArray(), log, ae );
   }
 
 }
